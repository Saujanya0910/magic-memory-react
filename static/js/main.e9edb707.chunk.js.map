{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["Singlecard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","count","setCount","complete","setComplete","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCount","prevCards","resetTurn","setTimeout","window","scrollTo","top","behavior","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA8BeA,EA3BI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAQjD,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBACEG,IAAKL,EAAKK,IACVD,UAAU,QACVE,IAAI,eAEN,qBACED,IAAI,iBACJD,UAAU,OACVE,IAAI,YACJC,QAlBY,WACdJ,GACFF,EAAaD,YCHbQ,EAAa,CACjB,CAAE,IAAO,oBAAqBC,SAAS,GACvC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,kBAAmBA,SAAS,GACrC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,mBAAoBA,SAAS,IAkHzBC,MA/Gf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KACA,EAA0BT,mBAAS,GAAnC,mBAAOU,EAAP,KAAcC,EAAd,KACA,EAAgCX,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAGMC,EAAe,WAEnB,IAAMC,EAAgB,UAAIlB,EAAeA,GACtCmB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAA9B,GAAI,kCAAUA,GAAV,IAAgB+B,GAAIH,KAAKC,cAGpCZ,EAAa,MACbE,EAAa,MACbG,EAAS,GACTE,GAAY,GAGZX,EAASa,GACTX,EAAS,IAILd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAIhDgC,qBAAU,WACRP,MACC,IAGHO,qBAAU,WA6BR,OA5BGhB,GAAaE,IAEdE,GAAY,GAGTF,EAAUb,MAAQW,EAAUX,KAE7BiB,GAAS,SAAAW,GAAS,OAAIA,EAAU,KAGhCpB,GAAS,SAAAqB,GACP,OAAOA,EAAUJ,KAAI,SAAA9B,GACnB,OAAGA,EAAKK,MAAQW,EAAUX,IACjB,2BAAIL,GAAX,IAAiBS,SAAS,IAGnBT,QAKbmC,KAGAC,YAAW,kBAAMD,MAAa,MAI3B,eACN,CAACnB,EAAWE,IAGfc,qBAAU,WACK,IAAVX,IACDG,GAAY,GACZa,OAAOC,SAAS,CAACC,IAAK,EAAGC,SAAU,cAEpC,CAACnB,IAEJ,IAAMc,EAAY,WAChBlB,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAA0B,GAAS,OAAIA,EAAY,KAClCrB,GAAY,IAGd,OACE,sBAAKhB,UAAU,MAAf,UACE,6CAEEmB,GAAa,4EAAgDT,EAAhD,0BAEf,wBAAQP,QAASkB,EAAjB,sBAEA,qBAAKrB,UAAU,YAAf,SACIQ,EAAMkB,KAAI,SAAA9B,GAAI,OACd,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAAUF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC3DN,SAAUA,GAJLH,EAAK+B,SAShB,wCAAYjB,SClHlB4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e9edb707.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SingleCard.css'\r\n\r\nconst Singlecard = ({ card, handleChoice, flipped, disabled }) => {\r\n\r\n  const handleClick = () => {\r\n    if(!disabled) {\r\n      handleChoice(card)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? 'flipped' : ''}>\r\n        <img\r\n          src={card.src} \r\n          className=\"front\" \r\n          alt=\"card front\" \r\n        />\r\n        <img \r\n          src=\"/img/cover.png\" \r\n          className=\"back\" \r\n          alt=\"card back\" \r\n          onClick={handleClick} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Singlecard;","import './App.css';\r\nimport Singlecard from './components/SingleCard';\r\nimport { useEffect, React, useState } from 'react';\r\n\r\nconst cardImages = [\r\n  { \"src\": \"/img/helmet-1.png\", matched: false },\r\n  { \"src\": \"/img/potion-1.png\", matched: false },\r\n  { \"src\": \"/img/ring-1.png\", matched: false },\r\n  { \"src\": \"/img/scroll-1.png\", matched: false },\r\n  { \"src\": \"/img/shield-1.png\", matched: false },\r\n  { \"src\": \"/img/sword-1.png\", matched: false }\r\n]\r\n\r\nfunction App() {\r\n\r\n  const [cards, setCards] = useState([])\r\n  const [turns, setTurns] = useState(0)\r\n  const [choiceOne, setChoiceOne] = useState(null)\r\n  const [choiceTwo, setChoiceTwo] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n  const [count, setCount] = useState(0)\r\n  const [complete, setComplete] = useState(false)\r\n\r\n  // shuffle cards\r\n  const shuffleCards = () => {\r\n    // shuffle the cards by mixing pos\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map(card => ({ ...card, id: Math.random() }))\r\n\r\n    // clear choices and reset progress\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setCount(0)\r\n    setComplete(false)\r\n\r\n    // shuffle cards and init\r\n    setCards(shuffledCards)\r\n    setTurns(0)\r\n  }\r\n\r\n  // handle choices\r\n  const handleChoice = (card) => {\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\r\n  }\r\n\r\n  // start game automatically - shuffle and play\r\n  useEffect(() => {\r\n    shuffleCards()\r\n  }, [])\r\n\r\n  // hook to check choices\r\n  useEffect(() => {\r\n    if(choiceOne && choiceTwo) {\r\n      // donot allow cards to be clicked until computations are done\r\n      setDisabled(true)\r\n\r\n      // if cards match\r\n      if(choiceTwo.src === choiceOne.src) {    \r\n        // increment score count\r\n        setCount(prevCount => prevCount+1)\r\n\r\n        // update cards' matching status to true\r\n        setCards(prevCards => {\r\n          return prevCards.map(card => {\r\n            if(card.src === choiceOne.src) {\r\n              return {...card, matched: true}\r\n            }\r\n            else {\r\n              return card\r\n            }\r\n          })\r\n        })\r\n        \r\n        resetTurn()\r\n      } else {\r\n        // reset the turn after a small delay\r\n        setTimeout(() => resetTurn(), 700)\r\n      }\r\n    }\r\n\r\n    return () => {}\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  // hook to check game completion\r\n  useEffect(() => {\r\n    if(count === 6) {\r\n      setComplete(true)\r\n      window.scrollTo({top: 0, behavior: 'smooth'})\r\n    }\r\n  }, [count]);\r\n\r\n  const resetTurn = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setTurns(prevTurns => prevTurns + 1)\r\n    setDisabled(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Magic Match</h1>\r\n\r\n      { complete && (<p>Congratulations, you completed the game in { turns } turns! ðŸŽ‰</p>)}\r\n\r\n      <button onClick={shuffleCards}>New Game</button>\r\n\r\n      <div className=\"card-grid\">\r\n        { cards.map(card => ((\r\n          <Singlecard \r\n            key={card.id}\r\n            card={card} \r\n            handleChoice={handleChoice}\r\n            flipped={ card === choiceOne || card === choiceTwo || card.matched }\r\n            disabled={disabled}\r\n          />\r\n        ))) }\r\n      </div>\r\n\r\n      <p>Turns: { turns }</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}